import type { CacheFrom, ReturnCache } from '../..';
import { type VoiceStateStructure } from '../../client/transformers';
import type { APIVoiceState } from '../../types';
import { GuildBasedResource } from './default/guild-based';
export declare class VoiceStates extends GuildBasedResource<any, APIVoiceState> {
    namespace: string;
    filter(data: APIVoiceState, id: string, guild_id: string, from: CacheFrom): boolean;
    parse(data: any, id: string, guild_id: string): any;
    get(memberId: string, guildId: string): ReturnCache<VoiceStateStructure | undefined>;
    raw(memberId: string, guildId: string): ReturnCache<APIVoiceState | undefined>;
    bulk(ids: string[], guild: string): ReturnCache<VoiceStateStructure[]>;
    bulkRaw(ids: string[], guild: string): ReturnCache<APIVoiceState[]>;
    values(guildId: string): ReturnCache<VoiceStateStructure[]>;
    valuesRaw(guildId: string): ReturnCache<APIVoiceState[]>;
}
export type VoiceStateResource = Omit<APIVoiceState, 'member'> & {
    guild_id: string;
};
