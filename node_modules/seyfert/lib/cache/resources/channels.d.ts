import { type AllChannels, channelFrom } from '../../structures';
import type { APIChannel } from '../../types';
import type { CacheFrom, ReturnCache } from '../index';
import { GuildRelatedResource } from './default/guild-related';
export declare class Channels extends GuildRelatedResource<any, APIChannel> {
    namespace: string;
    filter(data: APIChannel, id: string, guild_id: string, from: CacheFrom): boolean;
    parse(data: APIChannel, id: string, guild_id: string): any;
    get(id: string): ReturnCache<AllChannels | undefined>;
    raw(id: string): ReturnCache<Omit<APIChannel, 'permission_overwrites'> | undefined>;
    bulk(ids: string[]): ReturnCache<ReturnType<typeof channelFrom>[]>;
    bulkRaw(ids: string[]): ReturnCache<Omit<APIChannel, 'permission_overwrites'>[]>;
    values(guild: string): ReturnCache<ReturnType<typeof channelFrom>[]>;
    valuesRaw(guild: string): ReturnCache<Omit<APIChannel, 'permission_overwrites'>[]>;
}
