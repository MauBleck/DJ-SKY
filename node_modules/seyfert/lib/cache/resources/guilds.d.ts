import type { CacheFrom, ReturnCache } from '..';
import { type GuildStructure } from '../../client/transformers';
import type { APIGuild, GatewayGuildCreateDispatchData } from '../../types';
import { BaseResource } from './default/base';
export declare class Guilds extends BaseResource<any, APIGuild | GatewayGuildCreateDispatchData> {
    namespace: string;
    filter(data: APIGuild, id: string, from: CacheFrom): boolean;
    get(id: string): ReturnCache<GuildStructure<'cached'> | undefined>;
    raw(id: string): ReturnCache<(APIGuild & {
        member_count?: number;
    }) | undefined>;
    bulk(ids: string[]): ReturnCache<GuildStructure<'cached'>[]>;
    bulkRaw(ids: string[]): ReturnCache<(APIGuild & {
        member_count?: number;
    })[]>;
    values(): ReturnCache<GuildStructure<'cached'>[]>;
    valuesRaw(): ReturnCache<(APIGuild & {
        member_count?: number;
    })[]>;
    remove(id: string): Promise<void>;
    set(from: CacheFrom, id: string, data: any): Promise<void>;
    patch(from: CacheFrom, id: string, data: any): Promise<void>;
}
