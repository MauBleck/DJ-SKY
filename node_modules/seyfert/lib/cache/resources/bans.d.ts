import type { CacheFrom, ReturnCache } from '../..';
import { type GuildBanStructure } from '../../client/transformers';
import type { APIBan, GatewayGuildBanModifyDispatchData } from '../../types';
import { GuildBasedResource } from './default/guild-based';
export declare class Bans extends GuildBasedResource<any, GatewayGuildBanModifyDispatchData | APIBan> {
    namespace: string;
    filter(data: APIBan, id: string, guild_id: string, from: CacheFrom): boolean;
    parse(data: any, key: string, guild_id: string): any;
    get(id: string, guild: string): ReturnCache<GuildBanStructure | undefined>;
    raw(id: string, guild: string): ReturnCache<Omit<GatewayGuildBanModifyDispatchData | APIBan, 'user'> | undefined>;
    bulk(ids: string[], guild: string): ReturnCache<GuildBanStructure[]>;
    bulkRaw(ids: string[], guild: string): ReturnCache<Omit<GatewayGuildBanModifyDispatchData | APIBan, 'user'>[]>;
    values(guild: string): ReturnCache<GuildBanStructure[]>;
    valuesRaw(guild: string): ReturnCache<Omit<GatewayGuildBanModifyDispatchData | APIBan, 'user'>[]>;
}
