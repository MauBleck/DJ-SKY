import { type VoiceStateStructure } from '../../client/transformers';
import type { UsingClient } from '../../commands';
import type { GatewayVoiceChannelEffectSendDispachData, GatewayVoiceServerUpdateDispatchData, GatewayVoiceStateUpdateDispatchData } from '../../types';
export declare const VOICE_SERVER_UPDATE: (_self: UsingClient, data: GatewayVoiceServerUpdateDispatchData) => {
    token: string;
    guildId: string;
    endpoint: string | null;
};
export declare const VOICE_STATE_UPDATE: (self: UsingClient, data: GatewayVoiceStateUpdateDispatchData) => Promise<[state: VoiceStateStructure] | [state: VoiceStateStructure, old?: VoiceStateStructure]>;
export declare const VOICE_CHANNEL_EFFECT_SEND: (_self: UsingClient, data: GatewayVoiceChannelEffectSendDispachData) => {
    channelId: string;
    guildId: string;
    userId: string;
    emoji?: {
        id: string | null;
        name: string | null;
        animated?: boolean | undefined;
    } | null | undefined;
    animationType?: import("../../types").AnimationTypes | null | undefined;
    animationId?: number | undefined;
    soundId: string | number;
    soundVolume?: number | undefined;
} | {
    guildId: string;
    channelId: string;
    emoji?: {
        id: string | null;
        name: string | null;
        animated?: boolean | undefined;
    } | null | undefined;
    userId: string;
    animationType?: import("../../types").AnimationTypes | null | undefined;
    animationId?: number | undefined;
};
