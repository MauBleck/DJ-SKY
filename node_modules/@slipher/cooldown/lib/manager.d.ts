import type { AnyContext } from 'seyfert';
import { type ReturnCache } from 'seyfert/lib/cache';
import type { BaseClient } from 'seyfert/lib/client/base';
import { type PickPartial } from 'seyfert/lib/common';
import { type CooldownData, CooldownResource, type CooldownType } from './resource';
export declare class CooldownManager {
    readonly client: BaseClient;
    resource: CooldownResource;
    constructor(client: BaseClient);
    getCommandData(name: string, guildId?: string): [name: string, data: CooldownProps | undefined] | undefined;
    has(options: CooldownHasOptions): ReturnCache<boolean>;
    set(options: CooldownSetOptions): import("seyfert/lib/common").Awaitable<void>;
    context(context: AnyContext, use?: keyof UsesProps, guildId?: string): ReturnCache<number | true>;
    /**
     * Use a cooldown
     * @returns The remaining cooldown in seconds or true if successful
     */
    use(options: CooldownUseOptions): ReturnCache<number | true>;
    /**
     * Drip the cooldown
     * @returns The cooldown was processed
     */
    drip(options: CooldownDripOptions): ReturnCache<boolean | number>;
    /**
     * Refill the cooldown
     * @param name - The name of the command
     * @param target - The target of the cooldown
     * @returns Whether the cooldown was refilled
     */
    refill(name: string, target: string, use?: keyof UsesProps): boolean;
}
export interface CooldownProps {
    /** target type */
    type: `${CooldownType}`;
    /** interval in ms */
    interval: number;
    /** refill amount */
    uses: UsesProps;
}
export interface CooldownUseOptions {
    name: string;
    target: string;
    use?: keyof UsesProps;
    guildId?: string;
}
export interface CooldownDripOptions extends Omit<CooldownUseOptions, 'guildId'> {
    props: CooldownProps;
    data: CooldownData;
}
export interface CooldownHasOptions extends CooldownUseOptions {
    tokens?: number;
}
export interface CooldownSetOptions extends PickPartial<CooldownData, 'lastDrip'> {
    name: string;
    target: string;
    type: `${CooldownType}`;
}
export interface UsesProps {
    default: number;
}
declare module 'seyfert' {
    interface Command {
        cooldown?: CooldownProps;
    }
    interface SubCommand {
        cooldown?: CooldownProps;
    }
    interface ContextMenuCommand {
        cooldown?: CooldownProps;
    }
    interface EntryPointCommand {
        cooldown?: CooldownProps;
    }
}
